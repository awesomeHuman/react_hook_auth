{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar isArray = require('../internals/is-array');\n\nvar nativeReverse = [].reverse;\nvar test = [1, 2]; // `Array.prototype.reverse` method\n// https://tc39.es/ecma262/#sec-array.prototype.reverse\n// fix for Safari 12.0 bug\n// https://bugs.webkit.org/show_bug.cgi?id=188794\n\n$({\n  target: 'Array',\n  proto: true,\n  forced: String(test) === String(test.reverse())\n}, {\n  reverse: function reverse() {\n    // eslint-disable-next-line no-self-assign -- dirty hack\n    if (isArray(this)) this.length = this.length;\n    return nativeReverse.call(this);\n  }\n});","map":{"version":3,"names":["$","require","isArray","nativeReverse","reverse","test","target","proto","forced","String","length","call"],"sources":["E:/my git/react_hook_auth/frontend/node_modules/core-js-pure/modules/es.array.reverse.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar isArray = require('../internals/is-array');\n\nvar nativeReverse = [].reverse;\nvar test = [1, 2];\n\n// `Array.prototype.reverse` method\n// https://tc39.es/ecma262/#sec-array.prototype.reverse\n// fix for Safari 12.0 bug\n// https://bugs.webkit.org/show_bug.cgi?id=188794\n$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {\n  reverse: function reverse() {\n    // eslint-disable-next-line no-self-assign -- dirty hack\n    if (isArray(this)) this.length = this.length;\n    return nativeReverse.call(this);\n  }\n});\n"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAD,CAArB;;AAEA,IAAIE,aAAa,GAAG,GAAGC,OAAvB;AACA,IAAIC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX,C,CAEA;AACA;AACA;AACA;;AACAL,CAAC,CAAC;EAAEM,MAAM,EAAE,OAAV;EAAmBC,KAAK,EAAE,IAA1B;EAAgCC,MAAM,EAAEC,MAAM,CAACJ,IAAD,CAAN,KAAiBI,MAAM,CAACJ,IAAI,CAACD,OAAL,EAAD;AAA/D,CAAD,EAAoF;EACnFA,OAAO,EAAE,SAASA,OAAT,GAAmB;IAC1B;IACA,IAAIF,OAAO,CAAC,IAAD,CAAX,EAAmB,KAAKQ,MAAL,GAAc,KAAKA,MAAnB;IACnB,OAAOP,aAAa,CAACQ,IAAd,CAAmB,IAAnB,CAAP;EACD;AALkF,CAApF,CAAD"},"metadata":{},"sourceType":"script"}