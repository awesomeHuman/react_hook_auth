{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\n\nvar perform = require('../internals/perform'); // `Promise.try` method\n// https://github.com/tc39/proposal-promise-try\n\n\n$({\n  target: 'Promise',\n  stat: true\n}, {\n  'try': function (callbackfn) {\n    var promiseCapability = newPromiseCapabilityModule.f(this);\n    var result = perform(callbackfn);\n    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);\n    return promiseCapability.promise;\n  }\n});","map":{"version":3,"names":["$","require","newPromiseCapabilityModule","perform","target","stat","callbackfn","promiseCapability","f","result","error","reject","resolve","value","promise"],"sources":["E:/practice project/react-component/contact-book-mern/frontend/node_modules/core-js-pure/modules/esnext.promise.try.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\n\n// `Promise.try` method\n// https://github.com/tc39/proposal-promise-try\n$({ target: 'Promise', stat: true }, {\n  'try': function (callbackfn) {\n    var promiseCapability = newPromiseCapabilityModule.f(this);\n    var result = perform(callbackfn);\n    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);\n    return promiseCapability.promise;\n  }\n});\n"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,qCAAD,CAAxC;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAD,CAAC,CAAC;EAAEI,MAAM,EAAE,SAAV;EAAqBC,IAAI,EAAE;AAA3B,CAAD,EAAoC;EACnC,OAAO,UAAUC,UAAV,EAAsB;IAC3B,IAAIC,iBAAiB,GAAGL,0BAA0B,CAACM,CAA3B,CAA6B,IAA7B,CAAxB;IACA,IAAIC,MAAM,GAAGN,OAAO,CAACG,UAAD,CAApB;IACA,CAACG,MAAM,CAACC,KAAP,GAAeH,iBAAiB,CAACI,MAAjC,GAA0CJ,iBAAiB,CAACK,OAA7D,EAAsEH,MAAM,CAACI,KAA7E;IACA,OAAON,iBAAiB,CAACO,OAAzB;EACD;AANkC,CAApC,CAAD"},"metadata":{},"sourceType":"script"}