{"ast":null,"code":"/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * var result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * var result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fpAk2\");\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","map":{"version":3,"names":["toDate","argument","arguments","length","TypeError","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN"],"sources":["E:/practice project/react-component/contact-book-mern/frontend/node_modules/date-fns/esm/toDate/index.js"],"sourcesContent":["/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * var result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * var result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport default function toDate(argument) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var argStr = Object.prototype.toString.call(argument)\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === 'object' && argStr === '[object Date]')\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument)\n  } else {\n    if (\n      (typeof argument === 'string' || argStr === '[object String]') &&\n      typeof console !== 'undefined'\n    ) {\n      console.warn(\n        \"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fpAk2\"\n      )\n      console.warn(new Error().stack)\n    }\n    return new Date(NaN)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,MAAT,CAAgBC,QAAhB,EAA0B;EACvC,IAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;IACxB,MAAM,IAAIC,SAAJ,CACJ,mCAAmCF,SAAS,CAACC,MAA7C,GAAsD,UADlD,CAAN;EAGD;;EAED,IAAIE,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,QAA/B,CAAb,CAPuC,CASvC;;EACA,IACEA,QAAQ,YAAYS,IAApB,IACC,OAAOT,QAAP,KAAoB,QAApB,IAAgCI,MAAM,KAAK,eAF9C,EAGE;IACA;IACA,OAAO,IAAIK,IAAJ,CAAST,QAAQ,CAACU,OAAT,EAAT,CAAP;EACD,CAND,MAMO,IAAI,OAAOV,QAAP,KAAoB,QAApB,IAAgCI,MAAM,KAAK,iBAA/C,EAAkE;IACvE,OAAO,IAAIK,IAAJ,CAAST,QAAT,CAAP;EACD,CAFM,MAEA;IACL,IACE,CAAC,OAAOA,QAAP,KAAoB,QAApB,IAAgCI,MAAM,KAAK,iBAA5C,KACA,OAAOO,OAAP,KAAmB,WAFrB,EAGE;MACAA,OAAO,CAACC,IAAR,CACE,6IADF;MAGAD,OAAO,CAACC,IAAR,CAAa,IAAIC,KAAJ,GAAYC,KAAzB;IACD;;IACD,OAAO,IAAIL,IAAJ,CAASM,GAAT,CAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}