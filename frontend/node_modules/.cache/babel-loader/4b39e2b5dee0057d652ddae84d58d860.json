{"ast":null,"code":"import addLeadingZeros from '../../addLeadingZeros/index.js';\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  }\n};\nexport default formatters;","map":{"version":3,"names":["addLeadingZeros","formatters","y","date","token","signedYear","getUTCFullYear","year","length","M","month","getUTCMonth","String","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds"],"sources":["E:/practice project/react-component/contact-book-mern/frontend/node_modules/date-fns/esm/_lib/format/lightFormatters/index.js"],"sourcesContent":["import addLeadingZeros from '../../addLeadingZeros/index.js'\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Year\n  y: function(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    var signedYear = date.getUTCFullYear()\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    var year = signedYear > 0 ? signedYear : 1 - signedYear\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length)\n  },\n\n  // Month\n  M: function(date, token) {\n    var month = date.getUTCMonth()\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2)\n  },\n\n  // Day of the month\n  d: function(date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length)\n  },\n\n  // AM or PM\n  a: function(date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am'\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return dayPeriodEnumValue.toUpperCase()\n      case 'aaaaa':\n        return dayPeriodEnumValue[0]\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.'\n    }\n  },\n\n  // Hour [1-12]\n  h: function(date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length)\n  },\n\n  // Hour [0-23]\n  H: function(date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length)\n  },\n\n  // Minute\n  m: function(date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length)\n  },\n\n  // Second\n  s: function(date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length)\n  }\n}\n\nexport default formatters\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,gCAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,UAAU,GAAG;EACf;EACAC,CAAC,EAAE,UAASC,IAAT,EAAeC,KAAf,EAAsB;IACvB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,IAAIC,UAAU,GAAGF,IAAI,CAACG,cAAL,EAAjB,CAVuB,CAWvB;;IACA,IAAIC,IAAI,GAAGF,UAAU,GAAG,CAAb,GAAiBA,UAAjB,GAA8B,IAAIA,UAA7C;IACA,OAAOL,eAAe,CAACI,KAAK,KAAK,IAAV,GAAiBG,IAAI,GAAG,GAAxB,GAA8BA,IAA/B,EAAqCH,KAAK,CAACI,MAA3C,CAAtB;EACD,CAhBc;EAkBf;EACAC,CAAC,EAAE,UAASN,IAAT,EAAeC,KAAf,EAAsB;IACvB,IAAIM,KAAK,GAAGP,IAAI,CAACQ,WAAL,EAAZ;IACA,OAAOP,KAAK,KAAK,GAAV,GAAgBQ,MAAM,CAACF,KAAK,GAAG,CAAT,CAAtB,GAAoCV,eAAe,CAACU,KAAK,GAAG,CAAT,EAAY,CAAZ,CAA1D;EACD,CAtBc;EAwBf;EACAG,CAAC,EAAE,UAASV,IAAT,EAAeC,KAAf,EAAsB;IACvB,OAAOJ,eAAe,CAACG,IAAI,CAACW,UAAL,EAAD,EAAoBV,KAAK,CAACI,MAA1B,CAAtB;EACD,CA3Bc;EA6Bf;EACAO,CAAC,EAAE,UAASZ,IAAT,EAAeC,KAAf,EAAsB;IACvB,IAAIY,kBAAkB,GAAGb,IAAI,CAACc,WAAL,KAAqB,EAArB,IAA2B,CAA3B,GAA+B,IAA/B,GAAsC,IAA/D;;IAEA,QAAQb,KAAR;MACE,KAAK,GAAL;MACA,KAAK,IAAL;MACA,KAAK,KAAL;QACE,OAAOY,kBAAkB,CAACE,WAAnB,EAAP;;MACF,KAAK,OAAL;QACE,OAAOF,kBAAkB,CAAC,CAAD,CAAzB;;MACF,KAAK,MAAL;MACA;QACE,OAAOA,kBAAkB,KAAK,IAAvB,GAA8B,MAA9B,GAAuC,MAA9C;IATJ;EAWD,CA5Cc;EA8Cf;EACAG,CAAC,EAAE,UAAShB,IAAT,EAAeC,KAAf,EAAsB;IACvB,OAAOJ,eAAe,CAACG,IAAI,CAACc,WAAL,KAAqB,EAArB,IAA2B,EAA5B,EAAgCb,KAAK,CAACI,MAAtC,CAAtB;EACD,CAjDc;EAmDf;EACAY,CAAC,EAAE,UAASjB,IAAT,EAAeC,KAAf,EAAsB;IACvB,OAAOJ,eAAe,CAACG,IAAI,CAACc,WAAL,EAAD,EAAqBb,KAAK,CAACI,MAA3B,CAAtB;EACD,CAtDc;EAwDf;EACAa,CAAC,EAAE,UAASlB,IAAT,EAAeC,KAAf,EAAsB;IACvB,OAAOJ,eAAe,CAACG,IAAI,CAACmB,aAAL,EAAD,EAAuBlB,KAAK,CAACI,MAA7B,CAAtB;EACD,CA3Dc;EA6Df;EACAe,CAAC,EAAE,UAASpB,IAAT,EAAeC,KAAf,EAAsB;IACvB,OAAOJ,eAAe,CAACG,IAAI,CAACqB,aAAL,EAAD,EAAuBpB,KAAK,CAACI,MAA7B,CAAtB;EACD;AAhEc,CAAjB;AAmEA,eAAeP,UAAf"},"metadata":{},"sourceType":"module"}